{"version":3,"sources":["components/header/app-header.module.scss","components/user-selection/user-selection.module.scss","components/header/app-header.tsx","components/user-selection/user-selection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppHeader","props","Fragment","className","styles","header_root","AppBar","position","Toolbar","Typography","app_name","variant","right_side_buttons","Button","color","UserSelection","selection_root","root__add_new_link_section","TextField","add_new_link_section__input","id","label","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,YAAc,gCAAgC,SAAW,6BAA6B,mBAAqB,yC,mBCA7HD,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,2BAA6B,mDAAmD,4BAA8B,sD,wOC6BzKC,EApBoC,SAACC,GAClD,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAWC,IAAOC,aACrB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYN,UAAWC,IAAOM,SAAUC,QAAQ,MAAhD,cAGA,yBAAKR,UAAWC,IAAOQ,oBACrB,kBAACC,EAAA,EAAD,CAAQC,MAAM,WAAd,OACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAd,c,yBCOCC,EAtB4C,SACzDd,GAEA,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAWC,IAAOY,gBACrB,yBAAKb,UAAWC,IAAOa,4BACrB,kBAACC,EAAA,EAAD,CACEf,UAAWC,IAAOe,4BAClBC,GAAG,iBACHC,MAAM,iBACNV,QAAQ,aAEV,kBAACE,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,WAAlC,WCSKQ,EAtBO,WACpB,OACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,KAGE,kBAAC,EAAD,MACA,kBAAC,IAAD,KAOE,kBAAC,IAAD,CAAOoB,KAAK,KACV,kBAAC,EAAD,WCTQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c81a08f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_root\":\"app-header_header_root__2WoVV\",\"app_name\":\"app-header_app_name__2UN0H\",\"right_side_buttons\":\"app-header_right_side_buttons__tOiiy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selection_root\":\"user-selection_selection_root__3VJkP\",\"root__add_new_link_section\":\"user-selection_root__add_new_link_section__38iZb\",\"add_new_link_section__input\":\"user-selection_add_new_link_section__input__1rimv\"};","import React from \"react\";\r\nimport { AppHeaderProps } from \"./app-header-props\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport styles from \"./app-header.module.scss\";\r\nexport const AppHeader: React.FC<AppHeaderProps> = (props): JSX.Element => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className={styles.header_root}>\r\n        <AppBar position=\"sticky\">\r\n          <Toolbar>\r\n            <Typography className={styles.app_name} variant=\"h6\">\r\n              Crawlerino\r\n            </Typography>\r\n            <div className={styles.right_side_buttons}>\r\n              <Button color=\"inherit\">New</Button>\r\n              <Button color=\"inherit\">Fork</Button>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from \"react\";\r\nimport { UserSelectionProps } from \"./user-selection-props\";\r\nimport styles from \"./user-selection.module.scss\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport const UserSelection: React.FC<UserSelectionProps> = (\r\n  props\r\n): JSX.Element => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className={styles.selection_root}>\r\n        <div className={styles.root__add_new_link_section}>\r\n          <TextField\r\n            className={styles.add_new_link_section__input}\r\n            id=\"outlined-basic\"\r\n            label=\"Pazaruvaj link\"\r\n            variant=\"outlined\"\r\n          />\r\n          <Button variant=\"contained\" color=\"primary\">\r\n            Add\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserSelection;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport AppHeader from \"./components/header/app-header\";\r\nimport UserSelection from \"./components/user-selection/user-selection\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <AppHeader />\r\n        <Switch>\r\n          {/* <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/users\">\r\n              <Users />\r\n            </Route> */}\r\n          <Route path=\"/\">\r\n            <UserSelection />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}